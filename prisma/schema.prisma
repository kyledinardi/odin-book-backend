generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  username          String    @unique
  displayName       String
  pfpUrl            String
  joinDate          DateTime  @default(now())
  headerUrl         String?
  bio               String?
  location          String?
  website           String?
  passwordHash      String?
  provider          String?
  providerProfileId String?
  followers         User[]    @relation("followers")
  following         User[]    @relation("followers")
  posts             Post[]    @relation("postAuthor")
  likedPosts        Post[]    @relation("likedPosts")
  comments          Comment[] @relation("commentAuthor")
  likedComments     Comment[] @relation("likedComments")
  reposts           Repost[]
}

model Post {
  id           Int       @id @default(autoincrement())
  text         String
  timestamp    DateTime  @default(now())
  feedItemType String    @default("post")
  imageUrl     String?
  poll         Poll?
  user         User      @relation("postAuthor", fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  likes        User[]    @relation("likedPosts")
  comments     Comment[]
  reposts      Repost[]
}

model Poll {
  id           Int      @id @default(autoincrement())
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       Int      @unique
  choices      String[]
  voters       Int[]
  choice1Votes Int[]
  choice2Votes Int[]
  choice3Votes Int[]
  choice4Votes Int[]
  choice5Votes Int[]
  choice6Votes Int[]
}

model Comment {
  id           Int       @id @default(autoincrement())
  text         String
  timestamp    DateTime  @default(now())
  feedItemType String    @default("comment")
  imageUrl     String?
  user         User      @relation("commentAuthor", fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  post         Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       Int
  parent       Comment?  @relation("replies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId     Int?
  likes        User[]    @relation("likedComments")
  replies      Comment[] @relation("replies")
  reposts      Repost[]
}

model Repost {
  id           Int      @id @default(autoincrement())
  timestamp    DateTime @default(now())
  feedItemType String   @default("repost")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  post         Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       Int?
  comment      Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId    Int?
}
