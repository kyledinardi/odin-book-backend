generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int            @id @default(autoincrement())
  username               String         @unique
  displayName            String
  pfpUrl                 String
  joinDate               DateTime       @default(now())
  headerUrl              String?
  bio                    String?
  location               String?
  website                String?
  passwordHash           String?
  provider               String?
  providerProfileId      String?
  followers              User[]         @relation("followers")
  following              User[]         @relation("followers")
  posts                  Post[]         @relation("postAuthor")
  likedPosts             Post[]         @relation("likedPosts")
  votes                  Choice[]
  comments               Comment[]      @relation("commentAuthor")
  likedComments          Comment[]      @relation("likedComments")
  reposts                Repost[]
  triggeredNotifications Notification[] @relation("notificationSource")
  receivedNotifications  Notification[] @relation("notificationTarget")
  rooms                  Room[]
  messages               Message[]
}

model Post {
  id            Int            @id @default(autoincrement())
  timestamp     DateTime       @default(now())
  text          String
  feedItemType  String         @default("post")
  imageUrl      String?
  user          User           @relation("postAuthor", fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  likes         User[]         @relation("likedPosts")
  pollChoices   Choice[]
  comments      Comment[]
  reposts       Repost[]
  notifications Notification[]
}

model Choice {
  id     Int    @id @default(autoincrement())
  text   String
  post   Post   @relation(fields: [postId], references: [id])
  postId Int
  votes  User[]
}

model Comment {
  id            Int            @id @default(autoincrement())
  timestamp     DateTime       @default(now())
  text          String
  feedItemType  String         @default("comment")
  imageUrl      String?
  user          User           @relation("commentAuthor", fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        Int
  parent        Comment?       @relation("replies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId      Int?
  likes         User[]         @relation("likedComments")
  replies       Comment[]      @relation("replies")
  reposts       Repost[]
  notifications Notification[]
}

model Repost {
  id           Int      @id @default(autoincrement())
  timestamp    DateTime @default(now())
  feedItemType String   @default("repost")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  post         Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       Int?
  comment      Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId    Int?
}

model Notification {
  id           Int      @id @default(autoincrement())
  timestamp    DateTime @default(now())
  type         String
  isRead       Boolean  @default(false)
  sourceUser   User     @relation("notificationSource", fields: [sourceUserId], references: [id], onDelete: Cascade)
  sourceUserId Int
  targetUser   User     @relation("notificationTarget", fields: [targetUserId], references: [id], onDelete: Cascade)
  targetUserId Int
  post         Post?    @relation(fields: [postId], references: [id])
  postId       Int?
  comment      Comment? @relation(fields: [commentId], references: [id])
  commentId    Int?
}

model Room {
  id          Int       @id @default(autoincrement())
  lastUpdated DateTime  @default(now())
  users       User[]
  messages    Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  text      String
  imageUrl  String?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    Int
}
